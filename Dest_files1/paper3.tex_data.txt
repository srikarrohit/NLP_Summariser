#1#1



todocolorrgb1.0,0.0,0.0








@#!T
Property Invariant Embedding for Automated Reasoning
@#^T



  Miroslav Olšák
  University of Innsbruck, Austria, email: mirek@olsak.net
  Cezary Kaliszyk
  University of Innsbruck, Austria, email: Cezary.Kaliszyk@uibk.ac.at
  Josef Urban
  Czech Technical Univ. in Prague, Czechia, email: Josef.Urban@cvut.cz

ecai


@#!A

Automated reasoning and theorem proving have recently become major challenges
for machine learning. In other domains, representations that are able
to abstract over unimportant transformations, such as abstraction over
translations and rotations in vision, are becoming more common.
Standard methods of embedding mathematical formulas for learning theorem proving
are however yet unable to handle many important transformations. In particular, embedding previously unseen
labels, that often arise in definitional encodings and in Skolemization, has been very weak so far. Similar problems appear when transferring knowledge between known symbols.

We propose a novel encoding of formulas that extends existing graph neural
network models. This encoding represents symbols  only by nodes
in the graph, without giving the network any knowledge of the original
labels. We provide additional links between such nodes that allow the
network to recover the meaning and therefore correctly embed such nodes
irrespective of the given labels. We test the proposed encoding in an
automated theorem prover
based on the tableaux connection calculus,
and show that it improves on the best characterizations used
so far.  The encoding is further evaluated on the premise selection task and a newly introduced symbol guessing task,
and shown to correctly predict 65% of the symbol names.

@#^A



@#!S
Introduction
@#^S


Automated Theorem Provers (ATPs) DBLP:books/el/RobinsonV01 can be in principle
used to attempt the proof of any provable mathematical conjecture. 
The standard ATP approaches have
so far relied primarily on fast implementation of manually designed search procedures and heuristics.
However, using machine learning for guidance in the vast action spaces of the ATP calculi is a
natural choice that has been recently shown to significantly improve over the 
unguided systems KaliszykUMO18,JakubuvU19.

The common procedure of a firstorder ATP system -- saturation-style
or tableaux -- is the following. The ATP starts with a set of first
order axioms and a conjecture. The conjecture is negated and the
formulas are Skolemized and clausified.
The objective is then to derive a contradiction from the set of clauses,
typically using some form of resolution and related inference rules.
The Skolemization as well as introduction of new definitions during
the clausification results in the introduction of many new function and predicate
symbols.

When guiding the proving process by statistical machine learning, 
the state of the prover and the
formulas, literals, and clauses, are typically encoded  to vectors of
real numbers. This has been so far mostl  done with hand-crafted features resulting
in large sparse vectors DBLP:conf/ijcai/KaliszykUV15,hammers4qed,abs-1108-3446,UrbanVS11,KaliszykU15,JakubuvU17a, possibly reducing their dimension afterwards ChvalovskyJ0U19. 
Several experiments with neural
networks have been made recently, in particular based on 1D convolutions,
RNNs GollerK96, TreeRNNs ChvalovskyJ0U19, and GraphNNs DuvenaudMABHAA15. Most of the approaches, however, cannot
capture well the idea of a variable occurring multiple times in the
formula and to abstract from the names of the variables.
These issues were first 
addressed in FormulaNet DBLP:conf/nips/WangTWD17 but even that
architecture relies on knowing the names of function and predicate symbols. This makes it 
unsuitable for hand ing the large number of problem-specific function and predicate
symbols introduced during the cla sification.[The ratio of such symbols in real-world clausal datasets is around 40%, see Section ||SYMBOLTOKEN|| same holds for large datasets of ATP problems
where symbol names are not used consistently, such as the TPTP library Sutcliffe10.


In this paper, we make further steps towards the abstraction of
mathematical clauses, formulas and proof states. We present a network that is invariant not only
under renaming of variables, but also under renaming of arbitrary function and predicate
symbols. It is also invariant under replacement of the symbols by their negated versions.
This is achieved by a novel conversion of the input formulas into a hypergraph, followed by a 
particularly designed 
graph neural network (GNN) capable of maintaining the invariance under negation. 
We experimentally demonstrate in three case studies
that the network works well on data 
coming from automated theorem proving tasks.


The paper is structured as follows. We first formally describe our network architecture in
Section ||SYMBOLTOKEN|| and discuss its invariance properties
in Section ||SYMBOLTOKEN|| We describe an experiment using the
network for guiding  in Section ||SYMBOLTOKEN|| and
two experiments done on a fixed dataset in
Section ||SYMBOLTOKEN|| Section ||SYMBOLTOKEN|| contains the
results of these three experiments.


@#!S
Network Architecture for Invariant Embedding
@#^S


This section describes the design and details of the proposed neural architecture for invariant embeddings.
 The architecture gets as its input a set of clauses  C. 
It outputs an embedding for each of the clauses in  C, each literal and subterm and each function and predicate
symbol present in  C. The process consists of initially
constructing a hypergraph out of the given set of clauses, and then
several message passing layers on the hypergraph. In Section ||SYMBOLTOKEN|| we first explain the construction of a hypergraph from the input clauses. The details of the message passing are explained in Section ||SYMBOLTOKEN|| Construction
@#S^S

When converting the clauses to the graph, we aim to capture as much relevant structure as possible. We roughly convert the tree structure of the terms to a circuit by sharing variables, constants and also bigger terms. The graph will be also interconnected through special nodes representing function symbols.
Let ||SYMBOLTOKEN|| c denote the number of clauses, and let the clauses be
 C ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ..., ||SYMBOLTOKEN|| c}. Similarly, let
 S ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ..., ||SYMBOLTOKEN|| s} denote all the function and
predicate symbols occurring at least once in the given set of clauses,
and  T ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ..., ||SYMBOLTOKEN|| t} denote all the
subterms and literals occurring at least once in the given set of
clauses. Two subterms are considered to be identical (and therefore
represented by a single node) if they are constructed the same way
using the same functions and variables. If ||SYMBOLTOKEN|| is a negative
literal, the unnegated form of ||SYMBOLTOKEN|| is not automatically added to
 T but all its subterms are.

The sets  C,  S,  T represent the nodes of our
hypergraph. The hypergraph
will also contain two sets of edges: Binary ||SYMBOLTOKEN|| C× T between clauses and
literals, and 4-ary oriented labeled edges ||SYMBOLTOKEN|| st⊂ S× T×( ||SYMBOLTOKEN|| 
Here ||SYMBOLTOKEN|| is a specially created and added term no e disjoint from all actual terms and serving in the arity-related encodings described below. The label is present at the last position of the 5-tuple. 
The set ||SYMBOLTOKEN|| contains all
the pairs ||SYMBOLTOKEN|| T_j) where ||SYMBOLTOKEN|| is a literal contained in ||SYMBOLTOKEN|| Note that this encoding makes the order of the literals in the clauses irrelevant, which corresponds to the desired semantic behavior.

The set ||SYMBOLTOKEN|| is constructed by the following
procedure applied to every
literal or subterm ||SYMBOLTOKEN|| that is not a variable. If ||SYMBOLTOKEN|| is a
negative literal, we set ||MATHEQUATION|| and interpret ||SYMBOLTOKEN|| as
T_i ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| otherwise we set ||MATHEQUATION|| interpret ||SYMBOLTOKEN|| as ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| where ||SYMBOLTOKEN|| S,  n is the arity of ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| T. If ||SYMBOLTOKEN|| we add ||SYMBOLTOKEN|| to ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| we add ||SYMBOLTOKEN|| to ||SYMBOLTOKEN|| finally, if ||SYMBOLTOKEN|| 2, we extend ||SYMBOLTOKEN|| by
all the tuples ||SYMBOLTOKEN|| for ||SYMBOLTOKEN|| encoding is used instead of just ||SYMBOLTOKEN|| to (reasonably) maintain th  order of function and predicate arguments.
For example, for two non-isomorphic (i.e., differently encoded) terms ||SYMBOLTOKEN|| and ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| will be encoded differently than ||SYMBOLTOKEN|| Note that even this encoding does not capture the complete information about the argument order.
For example, the term ||SYMBOLTOKEN|| would be encoded the same way as ||SYMBOLTOKEN|| 
We consider such information loss acceptable.
Further note that the sets ||SYMBOLTOKEN|| E_st, and the derived sets labeled F (explained below) are in fact multisets in our implementation. We present them using the set notations here for readability. 
@#S!S
Message Passing
@#S^S

Based on the hyperparameters L (number of layers), and ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| s^i, ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| for ||SYMBOLTOKEN|| (dimensions of
vectors), we construct ||SYMBOLTOKEN|| c, ||SYMBOLTOKEN|| s,
and ||SYMBOLTOKEN|| t. First we ||SYMBOLTOKEN|| s_0,j and ||SYMBOLTOKEN|| by learned constant vectors for every type
of clause, symbol, or term. By a "type" we mean 
an attribute based on the underlying task, see
Section ||SYMBOLTOKEN|| for an example. To preserve invariance
under negation (see Section ||SYMBOLTOKEN|| we initialize all
predicate symbols to the zero vector.

After the initialization, we propagate through
L message-passing layers. The
i-th layer will output vectors ||SYMBOLTOKEN|| s_i,j and ||SYMBOLTOKEN|| values in the last layer, that is ||SYMBOLTOKEN|| s_L,j ||SYMBOLTOKEN|| are considered to be the output of the network.
The basic idea of the message passing layer is to propagate information from a node to all its neighbors related by ||SYMBOLTOKEN|| and ||SYMBOLTOKEN|| while recognizing the "direction" in which the information came. 
After this, we 
reduce the incoming data to a finite dimension using a 
reduction function (defined below)
and propagate through standard
neural layers.[Mostly implemented using the ReLU activation function.]The symbol nodes ||SYMBOLTOKEN|| need particular care, because they can represent two predicate symbols at once: if ||SYMBOLTOKEN|| represents a predicate symbol P, then ||SYMBOLTOKEN|| represents the predicate symbol  P. To preserve the polarity invariance, the symbol nodes 
are
treated slightly differently.

In the following we first provide the formulas describing the computation. The
symbols used in them are explained ||SYMBOLTOKEN|| &= (
  ||SYMBOLTOKEN|| c ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| c· ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| +
  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| (
  ||SYMBOLTOKEN|| s· ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| +
  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| g
  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| -3pt
  ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| &= ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| (
  ||SYMBOLTOKEN|| t ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| t· ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  -3pt
  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| all the B symbols represent learnable vectors (biases), and all the
M symbols represent learnable matrices. Their sizes are listed in Fig. ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| c : ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| : ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| : ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| t : ||SYMBOLTOKEN|| t
 ||SYMBOLTOKEN|| c         &: ||SYMBOLTOKEN|| c× ||SYMBOLTOKEN|| ||SYMBOLTOKEN||       &: ||SYMBOLTOKEN|| c× ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| s         &: ||SYMBOLTOKEN|| s× ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| t         &: ||SYMBOLTOKEN|| t× ||SYMBOLTOKEN|| ||SYMBOLTOKEN||       &: ||SYMBOLTOKEN|| t× ||SYMBOLTOKEN|| ||SYMBOLTOKEN||       &: ||SYMBOLTOKEN|| s× ||SYMBOLTOKEN|| ||SYMBOLTOKEN||     &: ||SYMBOLTOKEN|| s× ||SYMBOLTOKEN|| ||SYMBOLTOKEN||     &: ||SYMBOLTOKEN|| t× ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| &: ||SYMBOLTOKEN|| t× ||SYMBOLTOKEN|| tSizes of learnable biases and matrices for ||SYMBOLTOKEN|| and ||SYMBOLTOKEN|| a reduction
operation ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| where all ||SYMBOLTOKEN|| are vectors of
the same dimension n, we mean the vector of dimension 2n obtained
by concatenation of ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| and ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| The
maximum and average operation are performed point-wise. We also
use another reduction operation  defined in the same way except
taking ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| I(u_i) instead of just
maximum. This makes  commute with multiplication by -1.
If a reduction operation obtains an empty input (the indexing set is
an empty set), the result is the zero vector of the expected size.

We construct sets ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| and ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| on ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| based on ||SYMBOLTOKEN|| where
j_ ||SYMBOLTOKEN|| c, ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| t, and ||SYMBOLTOKEN|| 
Informally  the set  ||SYMBOLTOKEN|| contains the indices related to type  y for message passing, given the j-th receiving node of type  ||SYMBOLTOKEN|| &= {a : ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| {a : ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| {(a,b,c,g) : ||SYMBOLTOKEN|| T_a, ||SYMBOLTOKEN|| T_c, ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| {(a,b,c,g) : ||SYMBOLTOKEN|| T_j, ||SYMBOLTOKEN|| T_b, ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| {(a,b,c,g) : ||SYMBOLTOKEN|| T_a, ||SYMBOLTOKEN|| T_b, ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| {(a,b,c,g) : ||SYMBOLTOKEN|| T_a, ||SYMBOLTOKEN|| T_j, ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| E_st can contain a dummy node ||SYMBOLTOKEN|| on the third and fourth positions, following ||SYMBOLTOKEN|| or ||SYMBOLTOKEN|| in the message passing layer may lead us to a non-existing vector ||SYMBOLTOKEN|| In that case, we just take the zero vector of dimension ||SYMBOLTOKEN|| t.

After L message passing layers, we obtain the embeddings ||SYMBOLTOKEN|| s_L,j, ||SYMBOLTOKEN|| of the clauses ||SYMBOLTOKEN|| symbols ||SYMBOLTOKEN|| and terms and literals ||SYMBOLTOKEN|| respectively.


@#!S
Invariance Properties
@#^S


By the design of the network, it is apparent that the output is
invariant under the names of the symbols. Indeed, the names are used only
for determining which symbol nodes and term nodes should be the same
and which should be different.

It is also worth noticing that the network is invariant under
reordering of literals in clauses, and under reordering of clauses.
More precisely, if we reorder the ||SYMBOLTOKEN|| ..., ||SYMBOLTOKEN|| c, then the ||SYMBOLTOKEN|| ..., ||SYMBOLTOKEN|| c are reordered accordingly, and
the values ||SYMBOLTOKEN|| t_i,j do not change if they still correspond
to the same symbols and terms (they could be also rearranged in
general). This property is clear from the fact that there is no
ordered processing of the data, and the only way how literals are
attributed to clauses is through graph edges which are also unordered.
Finally, the network is also designed to preserve the symmetry under
negation. More precisely, consider replacing every occurrence of a predicate
symbol ||SYMBOLTOKEN|| by the predicate symbol  ||SYMBOLTOKEN|| in every clause ||SYMBOLTOKEN|| every literal ||SYMBOLTOKEN|| Then the vectors ||SYMBOLTOKEN|| t_i,j do not
change, the vectors ||SYMBOLTOKEN|| do not change either for all
j ||SYMBOLTOKEN|| x, and the vector ||SYMBOLTOKEN|| is multiplied by -1.

We show this by induction on the layer i. For layer 0,
this is apparent since the ||SYMBOLTOKEN|| is a predicate symbol, ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| 0⃗ ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| let us assume that the claim is true for a layer i. 
We follow the computation of the next layer. The symbol
vectors ||SYMBOLTOKEN|| are not used at all in the computation of ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| remains the same. For ||SYMBOLTOKEN|| where ||SYMBOLTOKEN|| x, we
don't use ||SYMBOLTOKEN|| in the formula, and the signs have not changed ||SYMBOLTOKEN|| Therefore ||SYMBOLTOKEN|| remains the same.
When computing ||SYMBOLTOKEN|| we multiply every ||SYMBOLTOKEN|| with the
appropriate sign (denoted g in the formula). Since we have replaced every
occurrence of ||SYMBOLTOKEN|| by  ||SYMBOLTOKEN|| and kept the other symbols,
the sign g is multiplied by -1 if and only if c ||SYMBOLTOKEN|| x, and
therefore the product does not change.
Finally, when computing ||SYMBOLTOKEN|| we follow the formula ||MATHEQUATION||  ||SYMBOLTOKEN|| s· ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| depends only on values ||SYMBOLTOKEN|| and therefore
was not changed. We can rewrite the formula ||MATHEQUATION||  ||SYMBOLTOKEN|| s· ||SYMBOLTOKEN|| ||SYMBOLTOKEN||  ||SYMBOLTOKEN||  ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| is because , addition, matrix multiplication, and the
reduction function  are compatible with multiplication by -1.
In fact, except  they are all linear, thus compatible with
multiplication by any constant, and  is an odd function.
The second formula for ||SYMBOLTOKEN|| can be also seen as a formula
for minus the value of the
original ||SYMBOLTOKEN|| since ||SYMBOLTOKEN|| is the original value ||SYMBOLTOKEN|| and (-g) is the original value of g. ||SYMBOLTOKEN|| was multiplied by -1.


@#!S
Guiding a Connection Tableaux Prover
@#^S


One of the most important uses
of machine learning in theorem
proving is guiding the inferences done by
the automating theorem
provers. The first application of our proposed model is to guide the
inferences performed by the  prover OB03. This line of work
follows our previous experiments with this prover using the XGBoost system
for guidance KaliszykUMO18. In this section, we first give a
brief description of the
 prover, then we explain how we fit our network to the  prover, and
finally discuss the i teraction between the network and the Monte-Carlo
Tree Search that we use.
The  prover attempts to prove a given first-order logic problem by first
transforming its negation to a clausal form and then finding a set of instances of
the input clauses that is unsatisfiable.  proves the
unsatisfiability by building a connection tableaux, i.e. a tree,[In some implementations
this is a rooted forest, as there can be multiple literals in the start clause.]where
every node contains a literal of the following properties.

  * The root of the tree is an instance of a given initial clause.
  
  * The children of every non-leaf node are an instance of an input clause
    (we call such clauses
    axioms). Moreover, one of the child literals must be complementary
    to the node.
  
  * Every leaf node is complementary to an element of its path.



###FIGURE###
< g r a p h i c s ||SYMBOLTOKEN|| of a closed connection tableaux, adapted from Letz1994ControlledIO.
@@@FIGURE@@@


The tree is built during the proof process which involves
automatic computation of substitutions using unification. Therefore the only
decisions that have to be m de are "which axiom should be used for
which node?". In particular,  starts with the initial
clause and in every step, it selects the left-most unclosed (open) leaf. If the
leaf can be unified with an element of the path, the unification is
applied. Otherwise, the leaf has to be unified with a literal in an
axiom, and a decision, which literal in which axiom to use, has to be
made. The instance of the axiom is then added to the tree and the
process continues until the entire tree is closed (i.e., the prover
wins, see Fig. ||SYMBOLTOKEN|| or there is no remaining available move (i.e., the prover
loses). As most branches are infinite, additional limits are introduced
and the prover also loses if such a limit is reached.
In our experiments, we use a version of the prover with two additional
optimizations: lemmata and regularization, originally proposed by Otten DBLP:journals/aicom/Otten10.


###FIGURE###
< g r a p h i c s ||SYMBOLTOKEN|| state in the  solving process
@@@FIGURE@@@



To guide the proof search (Fig. ||SYMBOLTOKEN|| i.e. to select the next action,
we use Monte Carlo Tree Search with policy and value, similar to the AlphaZero silver2017mastering algorithm. This
means that the trainable model should take a  state as its
input, and return estimated value of the state, i.e., the probability that the
prover will win, and the action logits, i.e., real numbers assigned to every
available action. The action probabilities are then computed from action
logits using the softmax function.

To process the  state with our network, we first need to
convert it to a list of clauses. If there are A axioms, and a
path of length P, we give the network the ||SYMBOLTOKEN|| clauses: every
axiom is a clause and every element in the path is a clause consisting of
one literal. The last clause given to the network consists of all
the unfinished goals, both under the current path and in earlier
branches. This roughly corresponds to the set of clauses from which we
aim to obtain the contradiction. The initial labels of the clauses can be
therefore of 3 types: a clause originating from a goal, a member of a path, or an
axiom. Each of these types represent a learnable initial vector of
dimension 4.

The symbols can be of two types: predicates and functions, their
initial value is represented by a single real number: zero for
predicates, and a learnable number for functions. For term nodes,
variables in different axioms are always considered to be different,
and they are also considered to be different from the variables in the
tableaux (note that unification performs variable renaming). Variables in the tableaux are shared among the path and the
goals. Every term node can be of four types: a variable in an axiom,
a variable in the tableaux, a literal, or another term. The term nodes have
initial dimension 4.

Afterwards, we propagate through five message passing layers, with
dimensions ||SYMBOLTOKEN|| ||MATHEQUATION|| ||SYMBOLTOKEN|| = ||SYMBOLTOKEN|| ||MATHEQUATION|| obtaining ||SYMBOLTOKEN|| s_5,j and ||SYMBOLTOKEN|| we consider all the ||SYMBOLTOKEN|| vectors, apply
a hidden layer of size 64 with ReLU activation to them, apply
the  reduction and use one more hidden layer of size 64 with ReLU
activation. The final value is then computed by a linear
layer with sigmoid activation.

Given the general setup, we now describe how we compute the logit for an action corresponding to the use of ||SYMBOLTOKEN|| and complementing its literal ||SYMBOLTOKEN|| with the current goal. ||SYMBOLTOKEN|| represents the clause of all the remaining goals. We ||SYMBOLTOKEN|| t_5,j and ||SYMBOLTOKEN|| process it with a hidden layer
of size 64 with ReLU activation, and then use a linear output layer
(without the activation function).

With the  prover, we perform four solving and training
iterations. In every solving iteration, we attempt to solve every problem in
the dataset, generating training data in the meantime. The training
data are then used for training the network, minimizing the
cross-entropy with the target action probabilities and the MSE of the
target value of every trained state. Every solving iteration therefore
produces the target for action policy, and for value estimation, that are used
for the following training.

The solving iteration number 0 (we also call it "bare prover") is
performed differently from the 
following ones. We use the prover without guidance, performing random
steps with the step limit 200 repeatedly within a time limit.
For every proof we find, we run the random solver again from every
partial point in the proof, estimating the probabilities that the
particular actions will lead to a solution. This is our training data
for action probabilities. In order to get training da a for value, we take all the states which we
estimated during the computation of action probabilities. If the
probability of finding a proof is non-zero in that state, we give it value
1, otherwise, we give it value 0.

Every other solving iteration is based on the network guidance in an
MCTS setting, analogously to AlphaZero silver2017mastering and
to the  system KaliszykUMO18. In order to decide
on the action, we first built a game tree of size 200 according to the PUCT formula

U(s,a) ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| the prior probabilities and values are given by the network, and
then we select the most visited node (performing a bigstep). This contrasts to the previous
experiment with a simpler clasifier KaliszykUMO18 where
every decision node is given 2000 new expansions (in addition to the
expansions already performed on the node).
Additionally a limit of game steps of 200 has been added.
The target probabilities of any state in every bigstep is proportional
the number of visit counts of the appropriate actions in the tree
search. The target value in these states is boolean depending on
whether the proof was ultimately found or not.


@#!S
DeepMath Experiments
@#^S

DeepMath is a dataset developed for the
first deep learning experiments with pre ise selection IrvingSAECU16ju on the Mizar40
problems KaliszykU13b. Unlike other datasets such as
HOLStep DBLP:conf/iclr/KaliszykCS17, DeepMath contains first-order formulas
which makes it more suitable for our network. We used the dataset for
two experiments -- premise selection (Section ||SYMBOLTOKEN|| and recovering symbol names from the structure, i.e. symbol guessing (Section ||SYMBOLTOKEN|| Selection
@#S^S

DeepMath contains 32524 conjectures, and a balanced list of positive
and negative premises for each conjecture. There are on average 8
positive and 8 negative premises for each conjecture. The task we consider first is to
tell apart the positive and negative premises.

For our purposes, we randomly divided the conjectures into 3252 testing
conjectures and 29272 training conjectures. For every conjecture,
we clausified the negated conjecture together with
all its (negative and positive) premises, and gave them all as input to the
network (as a set of clauses). We kept the hyperparameters 
from the  experiment. There are two differences. First, there
are just two types of clause nodes: negated conjectures and premises.
Second, we consider just one type of variable nodes.

To obtain the output, we reduce (using the  function introduced
 in Section ||SYMBOLTOKEN|| the clause nodes belonging to the conjecture and we do the same
also for each premise. The the two results are concatenated and pushed through a
hidden layer of size 128 with ReLU activation. Finally,
an output layer (with sigmoid activation) is applied to obtain the
estimated probability of the premise being positive (i.e., relevant for the conjecture).


@#S!S
Recovering Symbol Names from the Structure
@#S^S

In addition to the standard premise selection task, our setting is
also suitable for defining and experimenting with a novel interesting
task: guessing the names of the symbols from the structure of the formula.
In particular, since the network has no information about the names of the symbols, 
it is interesting to see how much the trained system can correctly
guess the exact names of the function and predicates symbols based just on the problem
structure.

One of the interesting uses is for conjecturing by
  analogies GauthierKU16, i.e., creating new conjectures by
detecting and following alignments of various mathematical theories
and concepts. Typical examples include the alignment between the
theories of additive and multiplicative groups, complex and real
vector spaces, dual operations such as join and meet in lattices, etc.
The first systems used for alignment detection have been so far
manually engineered GauthierK19, whereas in our setting such
alignment is just a byproduct of the structural learning.

There are two ways how a new unique
symbol can arise during the clausification process.
Either as a Skolem function, or as a new definition (predicate)
that represents parts of the original formulas.
We performed two experiments based on how
such new symbols are handled. We either ignore them, and train the neural
network on the original (labeled) symbols only, or we give to all the
new symbols the common labels skolem and
def. Table ||SYMBOLTOKEN|| shows the frequencies of
the five most common symbols in the DeepMath dataset after the
clausification. Note that the newly introduced skolems and defin t ons
account for almost 40% of the data.



###TABLE###

###TABLE###

TPTP name & def & skolem & ||SYMBOLTOKEN|| & ||SYMBOLTOKEN|| & ||SYMBOLTOKEN|| name & N/A & N/A & ||SYMBOLTOKEN|| & Element & bool

Frequency & 21.5% & 17.3% & 2.0% & 1.7% & 1.2%
@@@TABLE@@@
 The most common symbols in the clausified DeepMath.
@@@TABLE@@@



@#!S
Experimental Results
@#^S

@#S!S
Guiding 
@#S^S

We evaluate our neural guided  against rlCoP KaliszykUMO18. Note however, that for both systems we
use 200 playouts per MCTS decision so the  results presented here are different from KaliszykUMO18. We start with a set of  states with their values and action probabilities coming from the 4595 training 
problems 
solved with the bare random prover.

After training on this set, the MCTS guided
by our network manages to solve 11978 training (160.7% more) and 1322 (159.2% more) testing problems, in total 13300 problems (160.5% more -- Fig. ||SYMBOLTOKEN|| This is
in total
49.1%
more than  guided by XGBoost  which in the same setup and with the same limits
solves 8012 training problems, 908 testing problems, and 8920 problems in total. 
The improvement in the first iteration over XGBoost on the training and testing set is 49.5% and 45.6% respectively.

Subsequent iterations are also much better than for rlCoP, with
slower progress already in third iteration (note that rlCoP also loses problems, starting with
6th iteration).
The evalu tion ran 100 provers in parallel on multiple CPUs communicating with the network running on a GPU. 
Receiving the queries from the prover takes
on average 0.1 s, while
the message-passing layers alone take around 0.12 s per batch.  The
current main speed issue turned out to be the communication overhead
between the provers and the network. The average inference step in 100
agents and one network inference took on average 0.57 sec.


###FIGURE###



###TABLE###

invariant net guided & bare & iter. 1 & iter. 2 & iter. 3 
overall  & 5105 & 13300 & 14042 & 14002
training & 4595 & 11978 & 12648 & 12642
testing  &  510 &  1322 &  1394 &  1360
rlCoP & bare & iter. 1 & iter. 2 & iter. 3 
overall  & 5105 & 8920 & 10030 & 10959 
training & 4595 & 8012 & 9042 & 9874 
testing  &  510 & 908 & 988 & 1085 
@@@TABLE@@@
Comparison of the number of problems solved by leanCoP guided by the invariant-preserving GNN and by XGBoost.
@@@FIGURE@@@





###FIGURE###
< g r a p h i c s ||SYMBOLTOKEN|| and training accuracy on the premise selection task on the DeepMath dataset.
@@@FIGURE@@@



@#S!S
Premise Selection
@#S^S

In the first DeepMath experiment with Boolean classification, we obtained testing accuracy of around 80%. We trained the network in 100 epochs on minibatches of size 50. A stability issue can be spotted around the epoch 60 from which the network quickly recovered.
We cannot compare the results to the standard methods since the dataset is by design hostile to them -- the negatives samples are based on the KNN, so KNN has accuracy even less than 50%. Simpler neural networks were previously tested on the same dataset DBLP:journals/corr/abs-1807-10268reaching accuracy 76.45% .

@#S!S
Recovering Symbol Names from the Structure
@#S^S

For guessing of symbol names, we used minibatches consisting only of
10 queries, and trained the network for 50 epochs. When training and
evaluating on the labeled symbols only, the testing accuracy reached
65.27% in the last epoch. Note that this accuracy is measured on
the whole graph, i.e., we count both the symbols of the conjecture and of the
premises. When training and evaluating also on the
def and skolem symbols, the testing accuracy reached
78.4% in the last epoch -- see Fig. ||SYMBOLTOKEN|| g r a p h i c s ||SYMBOLTOKEN|| and training accuracy on the label guessing task on the DeepMath dataset.
@@@FIGURE@@@

###FIGURE###
< g r a p h i c s ||SYMBOLTOKEN|| and training accuracy on the label guessing task including labels def and skolem on the DeepMath dataset.
@@@FIGURE@@@






We evaluate the symbol
guessing (without considering  def and skolem) in more detail on the 3252 test problems and their conjectures.
In particular, for each of these problems and each conjecture symbol,
the evaluation with the trained network gives a list of candidate
symbol names ranked by their probability.  We first compute the number
of cases where the most probable symbol name as suggested by the
trained network is the correct one.  This happens in 22409 cases out
of 32196, i.e., in 70% cases.[This differs from the
  testing accuracy of 65.27%
  mentioned above, b cause we only consider the conjecture symbols here.]
A perfect naming of all symbols is achieved for 544 conjectures, i.e.,
in 16.7% of the test cases. Some of the most common analogies
measured as the common symbol-naming mistakes done on the test
conjectures are shown in Table ||SYMBOLTOKEN|| Some of the common analogies
###TABLE###

count &   original Mizar symbol &  Mizar analogy 

   129& Relation-like&Function-like

     69&void&empty

     53&Abelian&add-associative

     47&total&-defined

     45&0&1

     ||SYMBOLTOKEN||     39&reflexive&transitive

     ||SYMBOLTOKEN||     31&trivial&empty
28& ||SYMBOLTOKEN||     27&associative&transitive

     26&infinite&Function-like

     25&empty&degenerated

     24&real&natural

     23&sigma-multiplicative&compl-closed
20&REAL&COMPLEX

     18&transitive&reflexive

     18&RelStr&TopStruct

     18&Category-like&transitive

     ||SYMBOLTOKEN||     16&initial&infinite

     16&[Graph-like]&Function-like

     16&associative&Group-like

     16&0&{}

     ||MATHEQUATION||     15&add-associative&associative

     ||MATHEQUATION||     13&width&len

     13&integer&natural

     ||SYMBOLTOKEN||     12 &∩&∪

     11 ||SYMBOLTOKEN||     10 ||SYMBOLTOKEN||     10 &ordinal&natural

      9 &closed&open

      8 &sup&inf

      8 &Submodule&Subspace

      7 &Int&Cl

@@@TABLE@@@


@@@TABLE@@@
We briefly analyze some of the analogies produced by the network predictions.
In ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| the trained network's best guess correctly labels the symbols
as binary intersection and union (both with probability ca 0.75).
Its second best guess is however also quite probable ||SYMBOLTOKEN|| the union and intersection. This is quite common, probably
because dual theorems about these two symbols are frequent in the
training data. Interestingly, the second best guess results also in an
provable conjecture, since it easily follows ||SYMBOLTOKEN|| just by symmetry of equality.

theorem :: ||SYMBOLTOKEN|| X, Y, Z being set holds ((X / Y)  (Y / Z))  (Z / X) ||SYMBOLTOKEN|| ((X  Y) / (Y  Z)) / (Z  X)

second guess:
for X, Y, Z being set holds ((X  Y) / (Y  Z)) / (Z  X) ||SYMBOLTOKEN|| ((X / Y)  (Y / Z))  (Z / X)
In ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| trained network has consistently decided to replace the symbols
defined for complex vector spaces with their analogs defined for real
vector spaces (i.e., those symbols are ranked higher). This is most likely because of the large theory of real
vector spaces in the training data, even though the exact ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| was not among the training data. This again means that the trained network has produced ||SYMBOLTOKEN|| as a new (provable) conjecture.

theorem :: ||SYMBOLTOKEN|| V being ComplexLinearSpace for u, v being VECTOR of V
for W being Subspace of V holds 
( u in W iff v ||SYMBOLTOKEN|| W ||SYMBOLTOKEN|| (v - u) ||SYMBOLTOKEN|| W )

theorem :: ||SYMBOLTOKEN|| V being RealLinearSpace for u, v being VECTOR of V
for W being Subspace of V holds 
( u in W iff v ||SYMBOLTOKEN|| W ||SYMBOLTOKEN|| (v - u) ||SYMBOLTOKEN|| W  


Finally, we show below two examples. The fi st  ne illustrates on theorems ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| and ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| network finding well-known dualities of concepts in lattices (join vs. meet, upper-bounded vs. lower-bounded and related concepts). The second one is an example of a discovered analogy between division and subtraction operations on complex numbers, i.e, conjecturing ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| ||SYMBOLTOKEN|| mptp/7.13.01 ||SYMBOLTOKEN|| :: LATTICE4:15
for 0L being lower-bounded Lattice 
for B1, B2 being ||SYMBOLTOKEN|| of the carrier of 0L holds 
(FinJoin B1) "" (FinJoin B2) ||SYMBOLTOKEN|| FinJoin (B1  B2)

similar to:
theorem Th23: :: LATTICE4:23
for 1L being upper-bounded Lattice
for B1, B2 being ||SYMBOLTOKEN|| of the carrier of 1L holds 
(FinMeet B1) "/(̈FinMeet B2) ||SYMBOLTOKEN|| FinMeet (B1  B2)

theorem :: ||SYMBOLTOKEN|| a, b, s being complex number holds 
a,b -- s ||SYMBOLTOKEN|| (a - s),(b - s)

similar to:
theorem :: ||SYMBOLTOKEN|| a, b, s being complex number holds 
a,b ||MATHEQUATION|| s ||SYMBOLTOKEN|| (a / s),(b / s)


@#!S
Related Work
@#^S
Early work on combining machine learning with automated theorem
proving includes,
e.g., DBLP:conf/ogai/ErtelSS89,DenzingerFGS99,DBLP:books/daglib/0002958.
Machine learning over large formal corpora created from ITP
libraries Urban06,MengP08,holyhammer has been used for premi e
selection ||SYMBOLTOKEN|| in strong hammer systems for selecting relevant facts
for proving new conjectures over large formal
libraries abs-1108-3446,BlanchetteGKKU16,hh4h4. More recently,
machine learning has also started to be used to guide the internal
search of the ATP systems. In saturation-style provers this has been
done by feedback loops for strategy
invention blistr,JakubuvU1 a,SchaferS15 and by using supervised
learning JakubuvU17a,LoosISK17 to select the  ext given
clause Overbeek:1974:NCA:321812.321814. In the simpler
connection tableau systems such as  OB03 used here, supervised
learning has been used to choose the next tableau extension
step UrbanVS11,KaliszykU15, using Monte-Carlo guided  roof
search FarberKU17 and reinforcement
learning KaliszykUMO18 with fast non-deep learners. Our main evaluation is done in this setting.

Deep neural networks for classification of mathematical formulae were first
introduced in the  eepMath experiments IrvingSAECU16ju
with 1D convolutional networks and LSTM networks.
For higher-order logic, the HolStep DBLP:conf/iclr/KaliszykCS17 dataset
was extracted from
interactive theorem prover HOL Light. 1D convolutional neural networks, LSTM, and their combination were proposed as baselines for the dataset.
On this dataset a Graph-based neural network was for a firs  time applied to theorem proving in the FormulaNet DBLP:conf/nips/WangTWD17 work.
FormulaNet, like our work, also represents identical
variables by a single nodes in a graph, being therefore invariant
under variable renaming. Unlike our network, FormulaNet glues
variables only and not more complex terms.
FormulaNet is not designed
specifically for first-order logic, therefore it lacks invariance under
negation and possibly reordering of clauses and literals.
The
greatest difference is however that our network 
abstracts over the symbol names while FormulaNet learns them individually.

A different invariance property was proposed in a network for propositional calculus by Selsam et
al. SelsamLBLMD19. This network is invariant under negation, order of clauses, and order of literals in clauses, however this 
is restricted to propositional logic, where no quantifiers and variables
are present. In the first-order setting, Kucik and
Korovin DBLP:journals/corr/abs-1807-10268 performed experiments with basic neural
networks with one hidden layer on the DeepMath dataset.
Neural networks reappeared in state-of-the-art saturation-based proving (E prover) in the work of Loos et al. slgicscklpar17. The considered models included CNNs, LSTMs, dilated con olutions, and tree models. The first practical comparison of neural networks, XGBoost and Liblinear in guiding E prover was done by Chvalovsky et al. ChvalovskyJ0U19.
An alternative to connecting an identifier with all the formulas about it, is to perform definitional embeddings. This has for the first time been done in the context of theorem proving in DeepMath IrvingSAECU16ju, however in a non-recursive way. A fully recursive, but non-deep name-independent encoding has been used and evaluated in HOLyHammer experiments ckju-mcs-hh. Similarity between concepts has been discovered using alignments, see e.g. DBLP:conf/lpar/GauthierK15.
Embeddings of particular individual logical concepts have been considered as well, for example polynomials AllamanisCKS17 or equations abs-1803-09123.


@#!S
Conclusion
@#^S


We presented a neural network for processing mathematical formulae invariant under symbol names, negation and ordering of clauses and their literals, and we demonstrated its learning capabilities in
three automated reasoning tasks.
In particular, the network improves over the previous version of 
guided by XGBoost by 45.6% on the test set in the first iteration of
learning-guided proving. It also outperforms earlier methods on the
premise-selection data, and establishes   strong baseline for symbol
guessing. One of its novel uses proposed here and allowed by this
neural architecture is creating new conjectures by detecting and
following alignments of various mathematical theories and
concepts. This task turns out to be a straigh forward application of the structural
learning performed by the network.

Possible future work includes for example integration with state-of-the-art saturation-style provers. 
An interesting next step is also evaluation on a heterogeneous dataset such as TPTP where
symbols are not used consistently and learning on multiple libraries --
e.g. jointly on HOL and HOL Light as done previously
by DBLP:conf/lpar/GauthierK15 using a hand-crafted alignment
system.

@#!S
Acknowledgements
@#^S
Olšák and Kaliszyk were supported by the ERC Project SMART Starting Grant no. 714034.
Urban was supported by the AI4REASON ERC
Consolidator grant number 649043, and by the Czech project
AI&Reasoning ||SYMBOLTOKEN|| and the European
Regional Development Fund.

leancop-graph-nn.bbl
When converting the clauses to the graph, we aim to capture as much relevant structure as possible. We roughly convert the tree structure of the terms to a circuit by sharing variables, constants and also bigger terms. The graph will be also interconnected through special nodes representing function symbols.


